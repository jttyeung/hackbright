1. When calculating the Big O notation for a particular algorithm, it’s necessary to consider the length of time it takes for the algorithm to run as the algorithm’s workload approaches infinity. You can think of the workload as the number of tasks required to complete a job. What determines the workload of figuring out whether your box of animal crackers contains an elephant?
>>> The total number (n) of animal crackers in the box

2. Order the following runtimes in descending order of efficiency (that is, fastest runtimes first, slowest last) as n approaches infinity:
O(1)
O(log n)
O(n)
O(n log n)
O(n^2)
O(2^n)



Stacks and Queues

1. In the following cases, would a stack or queue be a more appropriate data structure?
    1. The process of loading and unloading pallets onto a flatbed truck
    >>> stack
    2. Putting bottle caps on bottles of beer as they roll down an assembly line
    >>> queue
    3. Calculating the solution to this mathematical expression: 2 + (7 * 4) - (3 / 2)
    >>> stack

2. Describe two more situations where a queue would be an appropriate data structure.
    >>> Purchasing tickets online for a popular event, cars getting onto the freeway ramp

3. Describe two more situations where a stack would be an appropriate data structure.
    >>> How the back button on the browser functions, the order in which luggage is unpacked



Linked Lists

1. Given the linked list below, which are the nodes? What is the data for each node? Where is the head? Where is the tail? (Please be as specific as possible — exactly which parts of the diagram correspond to each part? Arrows? Boxes? Text?)
>>> Apple, Berry, Cherry boxes are the nodes
>>> The head is attached as an attribute of LLIST, and it is/points to the Apple node
>>> There is no tail attribute on this linked list

2. What’s the difference between doubly- and singly-linked lists?
>>> In doubly-linked lists there is an arrow from each node to the next node and an arrow from the next node back to the one preceeding it. It makes it possible to traverse back and forth between adjacent nodes.

3. Why is it faster to append to a linked list if we keep track of the tail as an attribute?
>>> If we know the tail we can append directly to the tail, O(1), instead of having to traverse through the linked list to find the last one linked, or O(n).



Trees

1. Given the tree above, in what order would a Breadth First Search (BFS) algorithm visit each node until finding burritos (starting at food)? Just list the order of nodes visited; no need to recreate the state of the algorithm data in your answer.
>>> food, italian, indian, mexican, lasagna, pizza, tikka masala, saag, burritos

2. Given the tree above, in what order would a Depth First Search (DFS) algorithm visit each node until finding Chicago-style (starting at food)? Just list the order of nodes visited; no need to recreate the state of the algorithm data in your answer.
>>> food, mexican, enchiladas, tacos, burritos, indian, saag, tikka masala, italian, pizza, sicilian, new york style, chicago style

3. How is a binary search tree different from other trees?
>>> Binary search trees have only two children (left/right nodes) from each parent node and are generally well-balanced

